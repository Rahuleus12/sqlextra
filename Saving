-- High-Performance Script for SAVING1 Balance Calculation
-- Optimized for speed and reliability with large datasets

USE cwizbank_adani;
GO

-- First verify the table structure
SELECT COLUMN_NAME as column_name,
       DATA_TYPE as data_type,
       CHARACTER_MAXIMUM_LENGTH as max_length,
       NUMERIC_PRECISION as precision,
       NUMERIC_SCALE as scale,
       IS_NULLABLE as is_nullable
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'SAVING1';
GO

-- Check if we need to add TRANS_ID for unique identification
IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('SAVING1') AND name = 'TRANS_ID')
BEGIN
    ALTER TABLE [dbo].[SAVING1] ADD TRANS_ID INT IDENTITY(1,1);
    PRINT 'Added TRANS_ID column for unique transaction identification';
END
GO

-- Add necessary indexes for performance optimization
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_SAVING1_MNo_Date_TransID' AND object_id = OBJECT_ID('[dbo].[SAVING1]'))
BEGIN
    CREATE INDEX IX_SAVING1_MNo_Date_TransID ON [dbo].[SAVING1] (MNO, [DATE], TRANS_ID);
    PRINT 'Created optimized index for better performance';
END
GO

-- Create or alter the high-performance balance calculation procedure
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'update_SAVING1_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[update_SAVING1_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[update_SAVING1_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Performance optimization: Use table variable instead of temp table for small result sets
    -- and temp table for larger result sets with proper indexing
    DECLARE @ProcessingStats TABLE (
        Accounts_Processed INT,
        Total_Records INT,
        Earliest_Date DATE,
        Latest_Date DATE,
        Total_Credits DECIMAL(16,2),
        Total_Debits DECIMAL(16,2),
        Net_Balance DECIMAL(16,2)
    );
    
    BEGIN TRY
        -- STEP 1: Create a temporary table with window functions to calculate running balances in one pass
        -- This approach eliminates the need for cursors which are the main performance bottleneck
        IF OBJECT_ID('tempdb..#calculated_balances') IS NOT NULL
            DROP TABLE #calculated_balances;
            
        -- Calculate all balances in a single efficient query using window functions
        WITH OrderedTransactions AS (
            SELECT 
                TRANS_ID,
                MNO,
                [DATE],
                OPERATOR,
                ISNULL(CREDIT, 0) AS CREDIT_AMT,
                ISNULL(DEBIT, 0) AS DEBIT_AMT,
                ROW_NUMBER() OVER (
                    PARTITION BY MNO 
                    ORDER BY [DATE], 
                             CASE WHEN OPERATOR = 'CWO' THEN 0 ELSE 1 END,
                             TRANS_ID
                ) AS RowNum
            FROM dbo.SAVING1
        )
        SELECT 
            TRANS_ID,
            MNO,
            [DATE],
            CREDIT_AMT,
            DEBIT_AMT,
            SUM(CREDIT_AMT - DEBIT_AMT) OVER (
                PARTITION BY MNO
                ORDER BY RowNum
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ) AS BALANCE
        INTO #calculated_balances
        FROM OrderedTransactions;
        
        -- Create index on the temp table for faster updates
        CREATE CLUSTERED INDEX IX_Calc_Balances ON #calculated_balances (TRANS_ID);
        
        -- STEP 2: Fast bulk update using the calculated balances
        -- This is much faster than row-by-row updates in a cursor
        UPDATE m
        SET m.BALANCE = cb.BALANCE
        FROM dbo.SAVING1 m
        INNER JOIN #calculated_balances cb ON m.TRANS_ID = cb.TRANS_ID;
        
        -- STEP 3: Collect statistics for the summary report
        INSERT INTO @ProcessingStats (
            Accounts_Processed,
            Total_Records,
            Earliest_Date,
            Latest_Date,
            Total_Credits,
            Total_Debits,
            Net_Balance
        )
        SELECT 
            COUNT(DISTINCT MNO),
            COUNT(*),
            MIN([DATE]),
            MAX([DATE]),
            SUM(CREDIT_AMT),
            SUM(DEBIT_AMT),
            SUM(CREDIT_AMT) - SUM(DEBIT_AMT)
        FROM #calculated_balances;
        
        -- Return the summary statistics
        SELECT 
            'Balance calculation complete' as step,
            Accounts_Processed as accounts_processed,
            Total_Records as total_records,
            Earliest_Date as earliest_date,
            Latest_Date as latest_date,
            Total_Credits as total_credits,
            Total_Debits as total_debits,
            Net_Balance as net_balance
        FROM @ProcessingStats;

    END TRY
    BEGIN CATCH
        SELECT 
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage,
            ERROR_LINE() AS ErrorLine,
            ERROR_PROCEDURE() AS ErrorProcedure;
    END CATCH
END;
GO

-- Create optimized procedure to mark opening balances
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'mark_SAVING1_opening_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[mark_SAVING1_opening_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[mark_SAVING1_opening_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;
    
    BEGIN TRY
        -- Use a single, set-based operation to mark opening balances
        -- This is much faster than using a cursor or temporary table approach
        WITH FirstTransactions AS (
            SELECT 
                TRANS_ID,
                ROW_NUMBER() OVER (PARTITION BY MNO ORDER BY [DATE], TRANS_ID) AS RowNum
            FROM dbo.SAVING1
        )
        UPDATE m
        SET OPERATOR = 'CWO'
        FROM dbo.SAVING1 m
        INNER JOIN FirstTransactions ft ON m.TRANS_ID = ft.TRANS_ID
        WHERE ft.RowNum = 1;

        -- Return summary
        SELECT 
            'Opening balances marked' as step,
            COUNT(*) as records_marked,
            COUNT(DISTINCT MNO) as accounts_marked
        FROM dbo.SAVING1
        WHERE OPERATOR = 'CWO';
    END TRY
    BEGIN CATCH
        SELECT 
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage,
            ERROR_LINE() AS ErrorLine,
            ERROR_PROCEDURE() AS ErrorProcedure;
    END CATCH
END;
GO

-- Create optimized procedure to verify balances
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'verify_SAVING1_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[verify_SAVING1_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[verify_SAVING1_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;
    
    -- Fast verification using set-based operations
    WITH OrderedTransactions AS (
        SELECT 
            TRANS_ID,
            MNO,
            [DATE],
            OPERATOR,
            ISNULL(CREDIT, 0) AS CREDIT_AMT,
            ISNULL(DEBIT, 0) AS DEBIT_AMT,
            BALANCE,
            ROW_NUMBER() OVER (
                PARTITION BY MNO 
                ORDER BY [DATE], 
                         CASE WHEN OPERATOR = 'CWO' THEN 0 ELSE 1 END,
                         TRANS_ID
            ) AS RowNum
        FROM dbo.SAVING1
    ),
    BalanceCheck AS (
        SELECT 
            TRANS_ID,
            MNO,
            [DATE],
            CREDIT_AMT,
            DEBIT_AMT,
            BALANCE,
            LAG(BALANCE) OVER (PARTITION BY MNO ORDER BY RowNum) AS PrevBalance,
            CREDIT_AMT - DEBIT_AMT AS ExpectedChange,
            OPERATOR
        FROM OrderedTransactions
    ),
    CorrectBalances AS (
        SELECT
            TRANS_ID,
            MNO,
            [DATE],
            BALANCE,
            -- For first row of each member, PrevBalance is NULL, so expected balance is just this row's change
            -- For other rows, expected balance is previous balance + this row's change
            CASE 
                WHEN PrevBalance IS NULL THEN CREDIT_AMT - DEBIT_AMT
                ELSE PrevBalance + CREDIT_AMT - DEBIT_AMT
            END AS ExpectedBalance,
            -- Flag incorrect balances
            CASE 
                WHEN PrevBalance IS NULL AND ABS(BALANCE - (CREDIT_AMT - DEBIT_AMT)) > 0.01 THEN 1
                WHEN PrevBalance IS NOT NULL AND ABS(BALANCE - (PrevBalance + CREDIT_AMT - DEBIT_AMT)) > 0.01 THEN 1
                ELSE 0
            END AS IsIncorrect,
            OPERATOR
        FROM BalanceCheck
    )
    SELECT 
        'Balance verification complete' AS step,
        COUNT(*) AS total_records,
        COUNT(DISTINCT MNO) AS total_accounts,
        SUM(CASE WHEN OPERATOR = 'CWO' THEN 1 ELSE 0 END) AS total_cwo_records,
        SUM(CASE WHEN IsIncorrect = 1 THEN 1 ELSE 0 END) AS incorrect_balances,
        CASE 
            WHEN SUM(CASE WHEN IsIncorrect = 1 THEN 1 ELSE 0 END) > 0 THEN 'FAILED: Some balances are incorrect'
            ELSE 'PASSED: All balances are correct'
        END AS verification_result
    FROM CorrectBalances;
END
GO

-- Instructions for use:
PRINT '
TO USE THE HIGH-PERFORMANCE BALANCE CALCULATION:

1. First mark opening balances:
   EXEC [dbo].[mark_SAVING1_opening_balances_fast];

2. Then calculate all balances:
   EXEC [dbo].[update_SAVING1_balances_fast];

3. Finally verify the results:
   EXEC [dbo].[verify_SAVING1_balances_fast];

PERFORMANCE NOTES:
- This optimized version uses set-based operations instead of cursors for dramatically improved speed
- Window functions perform the balance calculations in a single table scan
- All operations are performed in bulk for maximum SQL Server efficiency
- For very large tables (millions of rows), consider adding a WITH (TABLOCK) hint to further improve performance

Required columns:
- E_NO (VARCHAR)
- MNO (VARCHAR)
- DATE (DATE or DATETIME)
- DEBIT (DECIMAL)
- CREDIT (DECIMAL)
- BALANCE (DECIMAL)
- OPERATOR (VARCHAR)
- TRANS_ID (INT) - Will be added if not present
';
