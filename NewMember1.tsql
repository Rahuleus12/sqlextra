-- Create or alter the high-performance balance calculation procedure
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'update_member1_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[update_member1_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[update_member1_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;

    -- Performance optimization: Use table variable instead of temp table for small result sets
    -- and temp table for larger result sets with proper indexing
    DECLARE @ProcessingStats TABLE (
        Accounts_Processed INT,
        Total_Records INT,
        Earliest_Date DATE,
        Latest_Date DATE,
        Total_Credits DECIMAL(16,2),
        Total_Debits DECIMAL(16,2),
        Net_Balance DECIMAL(16,2)
    );

    BEGIN TRY
        -- STEP 1: Create a temporary table with window functions to calculate running balances based on TRANS_ID
        IF OBJECT_ID('tempdb..#calculated_balances') IS NOT NULL
            DROP TABLE #calculated_balances;

        -- Calculate all balances in a single efficient query using window functions
        WITH OrderedTransactions AS (
            SELECT
                TRANS_ID,
                M_NO,
                [DATE],
                OPERATOR,
                ISNULL(CREDIT, 0) AS CREDIT_AMT,
                ISNULL(DEBIT, 0) AS DEBIT_AMT
            FROM dbo.MEMBER1
        )
        SELECT
            TRANS_ID,
            M_NO,
            [DATE],
            CREDIT_AMT,
            DEBIT_AMT,
            SUM(CREDIT_AMT - DEBIT_AMT) OVER (
                PARTITION BY M_NO
                ORDER BY TRANS_ID -- Crucial change: Order by the unique transaction identifier
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ) AS BALANCE
        INTO #calculated_balances
        FROM OrderedTransactions;

        -- Create index on the temp table for faster updates
        CREATE CLUSTERED INDEX IX_Calc_Balances ON #calculated_balances (TRANS_ID);

        -- STEP 2: Fast bulk update using the calculated balances
        -- This is much faster than row-by-row updates in a cursor
        UPDATE m
        SET m.BALANCE = cb.BALANCE,
            m.RUNNING_BALANCE = cb.BALANCE -- Also update the RUNNING_BALANCE column if you intend to use it
        FROM dbo.MEMBER1 m
        INNER JOIN #calculated_balances cb ON m.TRANS_ID = cb.TRANS_ID;

        -- STEP 3: Collect statistics for the summary report
        INSERT INTO @ProcessingStats (
            Accounts_Processed,
            Total_Records,
            Earliest_Date,
            Latest_Date,
            Total_Credits,
            Total_Debits,
            Net_Balance
        )
        SELECT
            COUNT(DISTINCT M_NO),
            COUNT(*),
            MIN([DATE]),
            MAX([DATE]),
            SUM(CREDIT_AMT),
            SUM(DEBIT_AMT),
            SUM(CREDIT_AMT) - SUM(DEBIT_AMT)
        FROM #calculated_balances;

        -- Return the summary statistics
        SELECT
            'Balance calculation complete' as step,
            Accounts_Processed as accounts_processed,
            Total_Records as total_records,
            Earliest_Date as earliest_date,
            Latest_Date as latest_date,
            Total_Credits as total_credits,
            Total_Debits as total_debits,
            Net_Balance as net_balance
        FROM @ProcessingStats;

    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage,
            ERROR_LINE() AS ErrorLine,
            ERROR_PROCEDURE() AS ErrorProcedure;
    END CATCH
END;
GO

-- Instructions for use:
PRINT '
TO USE THE HIGH-PERFORMANCE BALANCE CALCULATION:

1. First mark opening balances:
   EXEC [dbo].[mark_member1_opening_balances_fast];

2. Then calculate all balances:
   EXEC [dbo].[update_member1_balances_fast];

3. Finally verify the results:
   EXEC [dbo].[verify_member1_balances_fast];

PERFORMANCE NOTES:
- This optimized version uses set-based operations instead of cursors for dramatically improved speed
- Window functions perform the balance calculations in a single table scan
- All operations are performed in bulk for maximum SQL Server efficiency
- For very large tables (millions of rows), consider adding a WITH (TABLOCK) hint to further improve performance

Required columns:
- E_NO (VARCHAR)
- M_NO (VARCHAR)
- DATE (DATE or DATETIME)
- DEBIT (DECIMAL)
- CREDIT (DECIMAL)
- BALANCE (DECIMAL)
- OPERATOR (VARCHAR)
- TRANS_ID (INT) - Must be a unique identifier for each transaction
- RUNNING_BALANCE (DECIMAL) - Will be updated with the calculated balance
';

