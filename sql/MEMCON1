-- High-Performance Script for MEMCON1 Balance Calculation with Ledger-Style Output
-- Optimized for speed, reliability, and traditional accounting ledger format

USE cwizbank_adani;
GO

-- First verify the table structure
SELECT COLUMN_NAME as column_name,
       DATA_TYPE as data_type,
       CHARACTER_MAXIMU_LENGTH as max_length,
       NUMERIC_PRECISION as precision,
       NUMERIC_SCALE as scale,
       IS_NULLABLE as is_nullable
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'MEMCON1';
GO

-- Add required ledger columns if they don't exist - ensuring each is added before use
-- TRANS_ID must be added first as others might depend on it (e.g., REFERENCE_NO generation)
IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('MEMCON1') AND name = 'TRANS_ID')
BEGIN
    ALTER TABLE [dbo].[MEMCON1] ADD TRANS_ID INT IDENTITY(1,1);
    PRINT 'Added TRANS_ID column for unique transaction identification';
END
GO -- Added GO after each ALTER TABLE to ensure it completes its batch

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('MEMCON1') AND name = 'DESCRIPTION')
BEGIN
    ALTER TABLE [dbo].[MEMCON1] ADD DESCRIPTION NVARCHAR(255) NULL;
    PRINT 'Added DESCRIPTION column for transaction details';
END
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('MEMCON1') AND name = 'TRANSACTION_TYPE')
BEGIN
    ALTER TABLE [dbo].[MEMCON1] ADD TRANSACTION_TYPE VARCHAR(50) NULL;
    PRINT 'Added TRANSACTION_TYPE column for transaction categorization';
END
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('MEMCON1') AND name = 'REFERENCE_NO')
BEGIN
    ALTER TABLE [dbo].[MEMCON1] ADD REFERENCE_NO VARCHAR(50) NULL;
    PRINT 'Added REFERENCE_NO column for transaction references';
END
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('MEMCON1') AND name = 'RUNNING_BALANCE')
BEGIN
    ALTER TABLE [dbo].[MEMCON1] ADD RUNNING_BALANCE DECIMAL(16,2) NULL;
    PRINT 'Added RUNNING_BALANCE column for cumulative balance tracking';
END
GO

-- Initialize newly added ledger columns (unconditional update with WHERE NULL checks)
-- These updates will run every time, but only affect rows where the column is NULL,
-- or if the column was just added.
UPDATE [dbo].[MEMCON1]
SET TRANSACTION_TYPE =
    CASE
        WHEN OPERATOR = 'CWO' THEN 'Opening Balance'
        WHEN CREDIT IS NOT NULL AND CREDIT > 0 THEN 'Deposit'
        WHEN DEBIT IS NOT NULL AND DEBIT > 0 THEN 'Withdrawal'
        ELSE 'Transaction'
    END
WHERE TRANSACTION_TYPE IS NULL;
PRINT 'Initialized TRANSACTION_TYPE column.';
GO

UPDATE [dbo].[MEMCON1]
SET DESCRIPTION =
    CASE TRANSACTION_TYPE
        WHEN 'Opening Balance' THEN 'Opening Balance'
        WHEN 'Deposit' THEN 'Deposit - ' + CONVERT(VARCHAR, [DATE], 106)
        WHEN 'Withdrawal' THEN 'Withdrawal - ' + CONVERT(VARCHAR, [DATE], 106)
        ELSE 'Transaction - ' + CONVERT(VARCHAR, [DATE], 106)
    END
WHERE DESCRIPTION IS NULL;
PRINT 'Initialized DESCRIPTION column.';
GO

-- Reference number depends on TRANS_ID, so ensure TRANS_ID is populated first
UPDATE [dbo].[MEMCON1]
SET REFERENCE_NO = 'REF-' + RIGHT('00000000' + CAST(TRANS_ID AS VARCHAR), 8)
WHERE REFERENCE_NO IS NULL;
PRINT 'Initialized REFERENCE_NO column.';
GO

PRINT 'Ensured all ledger columns are present and initialized.';
GO

-- Add necessary indexes for performance optimization
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_MEMCON1_MNo_Date_TransID' AND object_id = OBJECT_ID('[dbo].[MEMCON1]'))
BEGIN
    CREATE INDEX IX_MEMCON1_MNo_Date_TransID ON [dbo].[MEMCON1] (M_NO, [DATE], TRANS_ID);
    PRINT 'Created optimized index for better performance';
END
GO

-- Create or alter the high-performance balance calculation procedure
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'update_memcon1_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[update_memcon1_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[update_memcon1_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;

    -- Performance optimization: Use table variable instead of temp table for small result sets
    -- and temp table for larger result sets with proper indexing
    DECLARE @ProcessingStats TABLE (
        Accounts_Processed INT,
        Total_Records INT,
        Earliest_Date DATE,
        Latest_Date DATE,
        Total_Credits DECIMAL(16,2),
        Total_Debits DECIMAL(16,2),
        Net_Balance DECIMAL(16,2)
    );

    BEGIN TRY
        -- STEP 1: Calculate running balances directly ordering by TRANS_ID
        -- This ensures each distinct TRANS_ID is treated as a separate, ordered transaction.
        IF OBJECT_ID('tempdb..#calculated_balances') IS NOT NULL
            DROP TABLE #calculated_balances;

        SELECT
            TRANS_ID,
            M_NO,
            [DATE],
            OPERATOR,
            ISNULL(CREDIT, 0) AS CREDIT_AMT,
            ISNULL(DEBIT, 0) AS DEBIT_AMT,
            SUM(ISNULL(CREDIT, 0) - ISNULL(DEBIT, 0)) OVER (
                PARTITION BY M_NO
                ORDER BY TRANS_ID ASC -- Directly order by the unique transaction identifier
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ) AS BALANCE
        INTO #calculated_balances
        FROM dbo.MEMCON1;

        -- Create index on the temp table for faster updates
        CREATE CLUSTERED INDEX IX_Calc_Balances ON #calculated_balances (TRANS_ID);

        -- STEP 2: Fast bulk update using the calculated balances
        UPDATE m
        SET m.BALANCE = cb.BALANCE
        FROM dbo.MEMCON1 m
        INNER JOIN #calculated_balances cb ON m.TRANS_ID = cb.TRANS_ID;

        -- STEP 3: Collect statistics for the summary report
        INSERT INTO @ProcessingStats (
            Accounts_Processed,
            Total_Records,
            Earliest_Date,
            Latest_Date,
            Total_Credits,
            Total_Debits,
            Net_Balance
        )
        SELECT
            COUNT(DISTINCT M_NO),
            COUNT(*),
            MIN([DATE]),
            MAX([DATE]),
            SUM(CREDIT_AMT),
            SUM(DEBIT_AMT),
            SUM(CREDIT_AMT) - SUM(DEBIT_AMT)
        FROM #calculated_balances;

        -- Return the summary statistics
        SELECT
            'Balance calculation complete' as step,
            Accounts_Processed as accounts_processed,
            Total_Records as total_records,
            Earliest_Date as earliest_date,
            Latest_Date as latest_date,
            Total_Credits as total_credits,
            Total_Debits as total_debits,
            Net_Balance as net_balance
        FROM @ProcessingStats;

    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage,
            ERROR_LINE() AS ErrorLine,
            ERROR_PROCEDURE() AS ErrorProcedure;
    END CATCH
END;
GO

-- Create optimized procedure to mark opening balances
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'mark_memcon1_opening_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[mark_memcon1_opening_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[mark_memcon1_opening_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Use a single, set-based operation to mark opening balances
        -- This is much faster than using a cursor or temporary table approach
        WITH FirstTransactions AS (
            SELECT
                TRANS_ID,
                ROW_NUMBER() OVER (PARTITION BY M_NO ORDER BY [DATE], TRANS_ID) AS RowNum
            FROM dbo.MEMCON1
        )
        UPDATE m
        SET OPERATOR = 'CWO'
        FROM dbo.MEMCON1 m
        INNER JOIN FirstTransactions ft ON m.TRANS_ID = ft.TRANS_ID
        WHERE ft.RowNum = 1;

        -- Return summary
        SELECT
            'Opening balances marked' as step,
            COUNT(*) as records_marked,
            COUNT(DISTINCT M_NO) as accounts_marked
        FROM dbo.MEMCON1
        WHERE OPERATOR = 'CWO';
    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage,
            ERROR_LINE() AS ErrorLine,
            ERROR_PROCEDURE() AS ErrorProcedure;
    END CATCH
END;
GO

-- Create optimized procedure to verify balances
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'verify_memcon1_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[verify_memcon1_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[verify_memcon1_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;

    -- Create a temporary table to store verification results
    -- This avoids aggregating with a subquery which can be inefficient
    IF OBJECT_ID('tempdb..#balance_verification') IS NOT NULL
        DROP TABLE #balance_verification;

    -- First, materialize the incremental balance checks in a temp table
    -- This is more efficient than using nested CTEs with aggregations
    SELECT
        TRANS_ID,
        M_NO,
        [DATE],
        OPERATOR,
        ISNULL(CREDIT, 0) AS CREDIT_AMT,
        ISNULL(DEBIT, 0) AS DEBIT_AMT,
        BALANCE,
        ROW_NUMBER() OVER (
            PARTITION BY M_NO
            ORDER BY [DATE],
                     CASE WHEN OPERATOR = 'CWO' THEN 0 ELSE 1 END,
                     TRANS_ID
        ) AS RowNum
    INTO #balance_verification
    FROM dbo.MEMCON1;

    -- Create clustered index for performance
    CREATE CLUSTERED INDEX IX_BalanceVerify ON #balance_verification (M_NO, RowNum);

    -- Now add the previous balance and expected balance columns
    ALTER TABLE #balance_verification ADD
        PrevBalance DECIMAL(16,2) NULL,
        ExpectedBalance DECIMAL(16,2) NULL,
        IsIncorrect BIT NOT NULL DEFAULT 0;

    -- Update the previous balance values
    UPDATE bv
    SET PrevBalance = prev.BALANCE
    FROM #balance_verification bv
    LEFT JOIN #balance_verification prev
        ON bv.M_NO = prev.M_NO
        AND bv.RowNum = prev.RowNum + 1;

    -- Calculate expected balances and identify incorrect ones
    UPDATE #balance_verification
    SET ExpectedBalance =
            CASE
                WHEN PrevBalance IS NULL THEN CREDIT_AMT - DEBIT_AMT
                ELSE PrevBalance + CREDIT_AMT - DEBIT_AMT
            END,
        IsIncorrect =
            CASE
                WHEN PrevBalance IS NULL AND ABS(BALANCE - (CREDIT_AMT - DEBIT_AMT)) > 0.01 THEN 1
                WHEN PrevBalance IS NOT NULL AND ABS(BALANCE - (PrevBalance + CREDIT_AMT - DEBIT_AMT)) > 0.01 THEN 1
                ELSE 0
            END;

    -- Now do a single aggregation to get the summary
    DECLARE @incorrect_count INT;

    SELECT
        @incorrect_count = SUM(CASE WHEN IsIncorrect = 1 THEN 1 ELSE 0 END)
    FROM #balance_verification;

    -- Return the summary without nested aggregations
    SELECT
        'Balance verification complete' AS step,
        COUNT(*) AS total_records,
        COUNT(DISTINCT M_NO) AS total_accounts,
        SUM(CASE WHEN OPERATOR = 'CWO' THEN 1 ELSE 0 END) AS total_cwo_records,
        @incorrect_count AS incorrect_balances,
        CASE
            WHEN @incorrect_count > 0 THEN 'FAILED: Some balances are incorrect'
            ELSE 'PASSED: All balances are correct'
        END AS verification_result
    FROM #balance_verification;

    -- Optionally show the incorrect balances for debugging
    IF @incorrect_count > 0
    BEGIN
        SELECT TOP 100
            M_NO,
            [DATE],
            CREDIT_AMT,
            DEBIT_AMT,
            BALANCE AS actual_balance,
            ExpectedBalance AS expected_balance,
            BALANCE - ExpectedBalance AS balance_difference
        FROM #balance_verification
        WHERE IsIncorrect = 1
        ORDER BY ABS(BALANCE - ExpectedBalance) DESC;
    END
END
GO

-- Instructions for use:
PRINT '
TO USE THE HIGH-PERFORMANCE BALANCE CALCULATION FOR MEMCON1:

1. First mark opening balances:
   EXEC [dbo].[mark_memcon1_opening_balances_fast];

2. Then calculate all balances:
   EXEC [dbo].[update_memcon1_balances_fast];

3. Finally verify the results:
   EXEC [dbo].[verify_memcon1_balances_fast];

PERFORMANCE NOTES:
- This optimized version uses set-based operations instead of cursors for dramatically improved speed
- Window functions perform the balance calculations in a single table scan
- All operations are performed in bulk for maximum SQL Server efficiency
- For very large tables (millions of rows), consider adding a WITH (TABLOCK) hint to further improve performance

Required columns (will be added if not present):
- E_NO (VARCHAR)
- M_NO (VARCHAR)
- DATE (DATE or DATETIME)
- DEBIT (DECIMAL)
- CREDIT (DECIMAL)
- BALANCE (DECIMAL)
- OPERATOR (VARCHAR)
- TRANS_ID (INT) - Will be added if not present
';
