IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'update_SAVING1_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[update_SAVING1_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[update_SAVING1_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;
    
    DECLARE @ProcessingStats TABLE (
        Accounts_Processed INT,
        Total_Records INT,
        Earliest_Date DATE,
        Latest_Date DATE,
        Total_Credits DECIMAL(16,2),
        Total_Debits DECIMAL(16,2),
        Net_Balance DECIMAL(16,2)
    );

    BEGIN TRY
        -- Drop temp table if exists
        IF OBJECT_ID('tempdb..#calculated_balances') IS NOT NULL
            DROP TABLE #calculated_balances;

        -- Calculate balances with precise order
        WITH OrderedTransactions AS (
            SELECT 
                TRANS_ID,
                MNO,
                [DATE],
                ISNULL(CREDIT, 0) AS CREDIT_AMT,
                ISNULL(DEBIT, 0) AS DEBIT_AMT,
                ROW_NUMBER() OVER (
                    PARTITION BY MNO 
                    ORDER BY [DATE], TRANS_ID
                ) AS RowNum
            FROM dbo.SAVING1
        )
        SELECT 
            TRANS_ID,
            MNO,
            [DATE],
            CREDIT_AMT,
            DEBIT_AMT,
            SUM(CREDIT_AMT - DEBIT_AMT) OVER (
                PARTITION BY MNO
                ORDER BY [DATE], TRANS_ID
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ) AS BALANCE
        INTO #calculated_balances
        FROM OrderedTransactions;

        -- Index for performance
        CREATE CLUSTERED INDEX IX_Calc_Balances ON #calculated_balances (TRANS_ID);

        -- Fast update
        UPDATE m
        SET m.BALANCE = cb.BALANCE
        FROM dbo.SAVING1 m
        INNER JOIN #calculated_balances cb ON m.TRANS_ID = cb.TRANS_ID;

        -- Summary
        INSERT INTO @ProcessingStats (
            Accounts_Processed,
            Total_Records,
            Earliest_Date,
            Latest_Date,
            Total_Credits,
            Total_Debits,
            Net_Balance
        )
        SELECT 
            COUNT(DISTINCT MNO),
            COUNT(*),
            MIN([DATE]),
            MAX([DATE]),
            SUM(CREDIT_AMT),
            SUM(DEBIT_AMT),
            SUM(CREDIT_AMT) - SUM(DEBIT_AMT)
        FROM #calculated_balances;

        SELECT 
            'Balance calculation complete' as step,
            Accounts_Processed,
            Total_Records,
            Earliest_Date,
            Latest_Date,
            Total_Credits,
            Total_Debits,
            Net_Balance
        FROM @ProcessingStats;

    END TRY
    BEGIN CATCH
        SELECT 
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage,
            ERROR_LINE() AS ErrorLine,
            ERROR_PROCEDURE() AS ErrorProcedure;
    END CATCH
END;
GO
