-- High-Performance Script for SAVING1 Balance Calculation (Updated)
-- Fixed: Properly handle multiple transactions with same date and transno

USE cwizbank_adani;
GO

-- Verify table structure
SELECT COLUMN_NAME as column_name,
       DATA_TYPE as data_type,
       CHARACTER_MAXIMUM_LENGTH as max_length,
       NUMERIC_PRECISION as precision,
       NUMERIC_SCALE as scale,
       IS_NULLABLE as is_nullable
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'SAVING1';
GO

-- Add TRANS_ID column if not present
IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID('SAVING1') AND name = 'TRANS_ID')
BEGIN
    ALTER TABLE [dbo].[SAVING1] ADD TRANS_ID INT IDENTITY(1,1);
    PRINT 'Added TRANS_ID column for unique transaction identification';
END
GO

-- Add index for performance
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'IX_SAVING1_MNo_Date_TransID' AND object_id = OBJECT_ID('[dbo].[SAVING1]'))
BEGIN
    CREATE INDEX IX_SAVING1_MNo_Date_TransID ON [dbo].[SAVING1] (MNO, [DATE], TRANS_ID);
    PRINT 'Created optimized index for better performance';
END
GO

-- Drop and recreate procedure for balance calculation
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'update_SAVING1_balances_fast')
BEGIN
    DROP PROCEDURE [dbo].[update_SAVING1_balances_fast]
END
GO

CREATE PROCEDURE [dbo].[update_SAVING1_balances_fast]
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ProcessingStats TABLE (
        Accounts_Processed INT,
        Total_Records INT,
        Earliest_Date DATE,
        Latest_Date DATE,
        Total_Credits DECIMAL(16,2),
        Total_Debits DECIMAL(16,2),
        Net_Balance DECIMAL(16,2)
    );

    BEGIN TRY
        IF OBJECT_ID('tempdb..#calculated_balances') IS NOT NULL
            DROP TABLE #calculated_balances;

        WITH OrderedTransactions AS (
            SELECT 
                TRANS_ID,
                MNO,
                [DATE],
                TRANSNO,
                ISNULL(CREDIT, 0) AS CREDIT_AMT,
                ISNULL(DEBIT, 0) AS DEBIT_AMT,
                ROW_NUMBER() OVER (
                    PARTITION BY MNO 
                    ORDER BY [DATE], TRANSNO, TRANS_ID
                ) AS RowNum
            FROM dbo.SAVING1
        )
        SELECT 
            TRANS_ID,
            MNO,
            [DATE],
            CREDIT_AMT,
            DEBIT_AMT,
            SUM(CREDIT_AMT - DEBIT_AMT) OVER (
                PARTITION BY MNO
                ORDER BY RowNum
                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
            ) AS BALANCE
        INTO #calculated_balances
        FROM OrderedTransactions;

        CREATE CLUSTERED INDEX IX_Calc_Balances ON #calculated_balances (TRANS_ID);

        UPDATE m
        SET m.BALANCE = cb.BALANCE
        FROM dbo.SAVING1 m
        INNER JOIN #calculated_balances cb ON m.TRANS_ID = cb.TRANS_ID;

        INSERT INTO @ProcessingStats (
            Accounts_Processed,
            Total_Records,
            Earliest_Date,
            Latest_Date,
            Total_Credits,
            Total_Debits,
            Net_Balance
        )
        SELECT 
            COUNT(DISTINCT MNO),
            COUNT(*),
            MIN([DATE]),
            MAX([DATE]),
            SUM(CREDIT_AMT),
            SUM(DEBIT_AMT),
            SUM(CREDIT_AMT) - SUM(DEBIT_AMT)
        FROM #calculated_balances;

        SELECT 
            'Balance calculation complete' as step,
            Accounts_Processed as accounts_processed,
            Total_Records as total_records,
            Earliest_Date as earliest_date,
            Latest_Date as latest_date,
            Total_Credits as total_credits,
            Total_Debits as total_debits,
            Net_Balance as net_balance
        FROM @ProcessingStats;

    END TRY
    BEGIN CATCH
        SELECT 
            ERROR_NUMBER() AS ErrorNumber,
            ERROR_MESSAGE() AS ErrorMessage,
            ERROR_LINE() AS ErrorLine,
            ERROR_PROCEDURE() AS ErrorProcedure;
    END CATCH
END;
GO

